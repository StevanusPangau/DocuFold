name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  test:
    name: Test Extension
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
        vscode-version: [1.74.0, stable]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Compile TypeScript
        run: npm run compile

      - name: Run unit tests
        run: npm run test:unit
        env:
          DISPLAY: ':99.0'

      - name: Setup Xvfb (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Run integration tests
        run: npm run test:integration
        env:
          DISPLAY: ':99.0'

      - name: Run VSCode extension tests
        uses: coactions/setup-xvfb@v1
        with:
          run: npm run test
          options: -screen 0 1024x768x24

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.node-version }}-${{ matrix.vscode-version }}
          path: |
            test-results.xml
            coverage/

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check formatting
        run: npm run format:check

      - name: Lint TypeScript
        run: npm run lint

      - name: Type check
        run: npm run type-check

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: npx audit-ci --moderate

  build:
    name: Build Extension
    runs-on: ubuntu-latest
    needs: [test, lint-and-format, security-audit]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build extension
        run: npm run build

      - name: Package extension
        run: npm run package

      - name: Upload extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: docufold-extension
          path: '*.vsix'
          retention-days: 30

  publish-dev:
    name: Publish to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download extension artifact
        uses: actions/download-artifact@v4
        with:
          name: docufold-extension

      - name: Publish to VSCode Marketplace (Pre-release)
        run: npx vsce publish --pre-release --packagePath *.vsix
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

  publish-prod:
    name: Publish to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download extension artifact
        uses: actions/download-artifact@v4
        with:
          name: docufold-extension

      - name: Publish to VSCode Marketplace
        run: npx vsce publish --packagePath *.vsix
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - name: Publish to Open VSX Registry
        run: npx ovsx publish *.vsix
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, lint-and-format, security-audit, build]
    if: always()

    steps:
      - name: Notify Success
        if: ${{ needs.test.result == 'success' && needs.lint-and-format.result == 'success' && needs.security-audit.result == 'success' && needs.build.result == 'success' }}
        run: echo "✅ All checks passed! Extension is ready for deployment."

      - name: Notify Failure
        if: ${{ needs.test.result == 'failure' || needs.lint-and-format.result == 'failure' || needs.security-audit.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ CI/CD pipeline failed!"
          echo "Test: ${{ needs.test.result }}"
          echo "Lint: ${{ needs.lint-and-format.result }}"
          echo "Security: ${{ needs.security-audit.result }}"
          echo "Build: ${{ needs.build.result }}"
          exit 1
 