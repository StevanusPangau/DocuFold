name: Release Automation

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      pre_release:
        description: 'Create pre-release'
        required: false
        default: false
        type: boolean

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: version
        run: |
          current_version="${{ steps.current_version.outputs.version }}"
          version_type="${{ github.event.inputs.version_type }}"

          # Parse version components
          IFS='.' read -ra VERSION_PARTS <<< "$current_version"
          major=${VERSION_PARTS[0]}
          minor=${VERSION_PARTS[1]}
          patch=${VERSION_PARTS[2]}

          # Increment version based on type
          case $version_type in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          new_version="$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "New version will be: $new_version"

      - name: Update package.json version
        run: |
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version

      - name: Generate changelog
        id: changelog
        run: |
          # Create changelog entry
          changelog_file="CHANGELOG.md"
          new_version="${{ steps.version.outputs.new_version }}"
          release_date=$(date +"%Y-%m-%d")

          # Get commits since last release
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            last_tag=$(git describe --tags --abbrev=0)
            commits=$(git log --pretty=format:"- %s" $last_tag..HEAD)
          else
            commits=$(git log --pretty=format:"- %s")
          fi

          # Create temporary changelog
          cat > temp_changelog.md << EOF
          ## [$new_version] - $release_date

          ### Added
          $commits

          EOF

          # Prepend to existing changelog
          if [ -f "$changelog_file" ]; then
            tail -n +2 "$changelog_file" >> temp_changelog.md
            echo "# Changelog" > "$changelog_file"
            cat temp_changelog.md >> "$changelog_file"
          else
            echo "# Changelog" > "$changelog_file"
            cat temp_changelog.md >> "$changelog_file"
          fi

          rm temp_changelog.md

          # Output changelog for release notes
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$commits" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version changes
        run: |
          git add package.json CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git push origin main

  build-and-test:
    name: Build and Test
    needs: prepare-release
    uses: ./.github/workflows/ci.yml

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and package extension
        run: |
          npm run build
          npm run package

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-release.outputs.new_version }}
          release_name: DocuFold v${{ needs.prepare-release.outputs.new_version }}
          body: |
            ## What's New in v${{ needs.prepare-release.outputs.new_version }}

            ${{ needs.prepare-release.outputs.changelog }}

            ## Installation

            1. Download the `.vsix` file from the assets below
            2. Install via VSCode: `Extensions: Install from VSIX...`
            3. Or install from marketplace: `ext install katzu.docufold`

            ## Full Changelog

            See [CHANGELOG.md](https://github.com/StevanusPangau/DocuFold/blob/main/CHANGELOG.md) for complete version history.
          draft: false
          prerelease: ${{ github.event.inputs.pre_release == 'true' }}

      - name: Upload Extension Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./docufold-${{ needs.prepare-release.outputs.new_version }}.vsix
          asset_name: docufold-${{ needs.prepare-release.outputs.new_version }}.vsix
          asset_content_type: application/zip

  publish-marketplace:
    name: Publish to Marketplace
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: github.event.inputs.pre_release != 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build extension
        run: npm run build

      - name: Publish to VSCode Marketplace
        run: npx vsce publish
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - name: Publish to Open VSX Registry
        run: npx ovsx publish
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}

  notify-completion:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release, publish-marketplace]
    if: always()

    steps:
      - name: Notify Success
        if: ${{ needs.create-release.result == 'success' && (needs.publish-marketplace.result == 'success' || needs.publish-marketplace.result == 'skipped') }}
        run: |
          echo "üéâ Release v${{ needs.prepare-release.outputs.new_version }} completed successfully!"
          echo "üì¶ GitHub Release: Created"
          echo "üõí Marketplace: ${{ needs.publish-marketplace.result }}"

      - name: Notify Failure
        if: ${{ needs.create-release.result == 'failure' || needs.publish-marketplace.result == 'failure' }}
        run: |
          echo "‚ùå Release process failed!"
          echo "GitHub Release: ${{ needs.create-release.result }}"
          echo "Marketplace: ${{ needs.publish-marketplace.result }}"
          exit 1
 